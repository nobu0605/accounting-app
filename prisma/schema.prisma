generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              BigInt    @id @default(autoincrement())
  companyId       BigInt
  name            String
  email           String    @unique
  emailVerifiedAt DateTime?
  password        String
  rememberToken   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model PasswordReset {
  id        BigInt    @id @default(autoincrement())
  email     String
  token     String
  createdAt DateTime? @default(now())

  @@index([email])
}

model Company {
  id                 BigInt    @id @default(autoincrement())
  name               String
  industryClass      String?
  numberOfEmployees  Int?
  foundedDate        DateTime
  fiscalStartDate    DateTime
  fiscalEndDate      DateTime
  accountingTerm     Int       @default(1)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  users              User[]
  departments        Department[]
  accounts           Account[]
  journals           Journal[]
}

model Department {
  id         BigInt   @id @default(autoincrement())
  companyId  BigInt
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model Account {
  id                 BigInt     @id @default(autoincrement())
  companyId          BigInt
  name               String
  accountKey         String     
  classification     String
  isDefaultAccount   Boolean
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  company            Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subAccounts        SubAccount[]

  @@index([companyId])
  @@unique([companyId, accountKey])
}

model SubAccount {
  id              BigInt    @id @default(autoincrement())
  accountId       BigInt
  name            String
  subAccountKey   String    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@unique([accountId, subAccountKey])
}

model Journal {
  id                    BigInt      @id @default(autoincrement())
  companyId             BigInt
  dealDate              DateTime
  debitAccountKey       String
  debitSubAccountKey    String?
  debitAmount           Int
  creditAccountKey      String
  creditSubAccountKey   String?
  creditAmount          Int
  remark                String?
  hasMultipleJournal    Boolean
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  company               Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  multipleJournals      MultipleJournal[]

  @@index([companyId])
}

model MultipleJournal {
  id                    BigInt      @id @default(autoincrement())
  journalId             BigInt
  multipleJournalIndex  Int
  dealDate              DateTime
  debitAccountKey       String?
  debitSubAccountKey    String?
  debitAmount           Int
  creditAccountKey      String?
  creditSubAccountKey   String?
  creditAmount          Int
  remark                String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  journal               Journal    @relation(fields: [journalId], references: [id], onDelete: Cascade)

  @@index([journalId])
}
