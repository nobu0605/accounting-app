generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                BigInt    @id @default(autoincrement())
  company_id        BigInt
  name              String
  email             String    @unique
  email_verified_at DateTime?
  password          String
  remember_token    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  company           Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([company_id])
}

model PasswordReset {
  id        BigInt    @id @default(autoincrement())
  email     String
  token     String
  createdAt DateTime? @default(now())

  @@index([email])
}

model Company {
  id                  BigInt    @id @default(autoincrement())
  name                String
  industry_class      String?
  number_of_employees Int?
  founded_date        DateTime
  fiscal_start_date   DateTime
  fiscal_end_date     DateTime
  accounting_term     Int       @default(1)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  users               User[]
  departments         Department[]
  accounts            Account[]
  journals            Journal[]
}

model Department {
  id         BigInt   @id @default(autoincrement())
  company_id BigInt
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [company_id], references: [id])

  @@index([company_id])
}

model Account {
  id                BigInt     @id @default(autoincrement())
  company_id        BigInt
  name              String
  account_key       String     
  classification    String
  is_default_account Boolean
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  company           Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  sub_accounts      SubAccount[]

  @@index([company_id])
  @@unique([company_id, account_key])
}

model SubAccount {
  id              BigInt    @id @default(autoincrement())
  account_id      BigInt
  name            String
  sub_account_key String    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  account         Account   @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@index([account_id])
  @@unique([account_id, sub_account_key])
}

model Journal {
  id                  BigInt      @id @default(autoincrement())
  company_id          BigInt
  deal_date           DateTime
  debit_account_key   String
  debit_sub_account_key String?
  debit_amount        Int
  credit_account_key  String
  credit_sub_account_key String?
  credit_amount       Int
  remark              String?
  has_multiple_journal Boolean
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  company             Company    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  multiple_journals   MultipleJournal[]

  @@index([company_id])
}

model MultipleJournal {
  id                  BigInt      @id @default(autoincrement())
  journal_id          BigInt
  multiple_journal_index Int
  deal_date           DateTime
  debit_account_key   String?
  debit_sub_account_key String?
  debit_amount        Int
  credit_account_key  String?
  credit_sub_account_key String?
  credit_amount       Int
  remark              String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  journal             Journal    @relation(fields: [journal_id], references: [id], onDelete: Cascade)

  @@index([journal_id])
}