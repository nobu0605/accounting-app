generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  admin
  user
  guest
}

model User {
  id              BigInt    @id @default(autoincrement())
  companyId       BigInt
  name            String
  email           String    @unique
  emailVerifiedAt DateTime?
  password        String
  rememberToken   String?
  role            Role   @default(user)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model PasswordReset {
  id        BigInt    @id @default(autoincrement())
  email     String
  token     String
  createdAt DateTime? @default(now())

  @@index([email])
}

model Company {
  id                 BigInt    @id @default(autoincrement())
  name               String
  industryClass      String?
  numberOfEmployees  Int?
  foundedDate        DateTime
  accountingTerm     Int       @default(1)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  fiscalYears        FiscalYear[]
  users              User[]
  departments        Department[]
  accounts           Account[]
  journalEntries     JournalEntry[]
}

model FiscalYear {
  id        BigInt       @id @default(autoincrement())
  companyId BigInt
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  journalEntries JournalEntry[]
  company   Company   @relation(fields: [companyId], references: [id])
}

model Department {
  id         BigInt   @id @default(autoincrement())
  companyId  BigInt
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  company    Company  @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

enum AccountType {
  sales
  costOfGoodsSold
  sellingGeneralAdminExpenses
  nonOperatingIncome
  nonOperatingExpenses
  specialIncome
  specialExpenses
  currentAssets
  nonCurrentAssets
  currentLiabilities
  nonCurrentLiabilities
  equity
}

model Account {
  id                 BigInt     @id @default(autoincrement())
  companyId          BigInt
  name               String
  code               Int
  type               AccountType
  isDefaultAccount   Boolean
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  company            Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subAccounts        SubAccount[]
  journalEntryLines  JournalEntryLine[]

  @@index([companyId])
  @@unique([companyId, code])
}

model SubAccount {
  id              BigInt    @id @default(autoincrement())
  accountId       BigInt
  name            String
  code            Int  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  journalEntryLines  JournalEntryLine[]
  
  @@index([accountId])
  @@unique([accountId, code])
}

model JournalEntry {
  id                    BigInt      @id @default(autoincrement())
  companyId             BigInt
  fiscalYearId          BigInt
  dealDate              DateTime
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  fiscalYear            FiscalYear @relation(fields: [fiscalYearId], references: [id])
  company               Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  lines                 JournalEntryLine[]
  @@index([companyId])
}

model JournalEntryLine {
  id            BigInt        @id @default(autoincrement())
  journalEntryId BigInt
  accountId     BigInt
  subAccountId  BigInt?
  debit         Float      @default(0)
  credit        Float      @default(0)
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  journalEntry  JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account       Account    @relation(fields: [accountId], references: [id])
  subAccount    SubAccount? @relation(fields: [subAccountId], references: [id])
}
